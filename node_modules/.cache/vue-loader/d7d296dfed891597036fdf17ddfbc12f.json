{"remainingRequest":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\ui\\sea-modal.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\ui\\sea-modal.vue","mtime":1587032502000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4vc2VhLW1vZGFsIjsK"},{"version":3,"sources":["sea-modal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA","file":"sea-modal.vue","sourceRoot":"src/ui","sourcesContent":["<!-- Copyright (c) 2020 Dirk Holtwick. All rights reserved. https://holtwick.de/copyright -->\n\n<template>\n  <div class=\"sea-modal \" :class=\"{active}\" id=\"modal-id\" tabindex=\"-1\" v-trap-focus aria-modal=\"true\" :role=\"role\">\n    <a @click=\"doCancel\" class=\"sea-modal-overlay\" aria-label=\"Close\"></a>\n    <div class=\"sea-modal-container vstack\">\n      <header class=\"sea-modal-header modal-header -fix\" v-if=\"title || close\">\n        <div class=\"hstack\">\n          <div class=\"sea-modal-title -fit\">\n            <slot name=\"title\">{{ title }}</slot>\n          </div>\n          <sea-link v-if=\"close\" xtooltip=\"Close\" @click=\"doCancel\" class=\"-fix\" symbol=\"xmark\"/>\n        </div>\n      </header>\n      <section class=\"sea-modal-body modal-body -fit -scrollable\">\n        <slot></slot>\n      </section>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n@import \"./sea-modal\";\n</style>\n\n<script>\nimport trapFocus from './lib/directives/trapFocus'\nimport { removeElement } from './lib/helpers'\nimport SeaLink from './sea-link'\nimport SeaSymbol from './sea-symbol'\n\nconst log = require('debug')('ui:sea-modal')\n\nexport default {\n  name: 'sea-modal',\n  props: {\n    active: {\n      type: Boolean,\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    close: {\n      type: Boolean,\n      default: true,\n    },\n    standalone: {\n      type: Boolean,\n      default: false,\n    },\n    role: {\n      default: 'dialog',\n    },\n    canCancel: {\n      type: Boolean,\n      default: true,\n    },\n    onCancel: {\n      type: Function,\n      default: () => {\n        log('onCancel not defined')\n      },\n    },\n  },\n  components: {\n    SeaSymbol,\n    SeaLink,\n  },\n  directives: {\n    trapFocus,\n  },\n  methods: {\n    doCancel() {\n      log('do cancel')\n      this.$emit('cancel')\n      let onCancel = this?.$parent?.onCancel || this?.onCancel\n      if (onCancel) {\n        onCancel.apply(null, arguments)\n      }\n      this.doClose()\n    },\n    doClose() {\n      this.$emit('close', false)\n      this.$emit('update:active', false)\n\n      if (this.standalone) {\n        // Timeout for the animation complete before destroying\n        setTimeout(() => {\n          // this.active = false\n          this.$destroy()\n          removeElement(this.$el)\n        }, 150)\n      }\n    },\n    keyPress(event) {\n      if (this.active && event.keyCode === 27) { // Esc key\n        this.doCancel('escape')\n      }\n    },\n  },\n  created() {\n    document?.addEventListener('keyup', this.keyPress)\n  },\n  beforeMount() {\n    // Insert the Dialog component in the element container\n    if (this.standalone && typeof window !== 'undefined') {\n      this.$nextTick(() => {\n        const container = /* document.querySelector(this.container) || */ document.body\n        container.appendChild(this.$el)\n      })\n    }\n  },\n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document?.removeEventListener('keyup', this.keyPress)\n      // reset scroll\n      // document?.documentElement.classList.remove('is-clipped')\n    }\n  },\n\n}\n</script>\n"]}]}