{"remainingRequest":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\webrtc-peer.js","dependencies":[{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\webrtc-peer.js","mtime":1587032502000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiQzpcXFVzZXJzXFxCcmV6Z28tMTA5OFxcRGVza3RvcFxcYnJlenpcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gIkM6XFxVc2Vyc1xcQnJlemdvLTEwOThcXERlc2t0b3BcXGJyZXp6XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQzpcXFVzZXJzXFxCcmV6Z28tMTA5OFxcRGVza3RvcFxcYnJlenpcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOlxcVXNlcnNcXEJyZXpnby0xMDk4XFxEZXNrdG9wXFxicmV6elxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIkM6XFxVc2Vyc1xcQnJlemdvLTEwOThcXERlc2t0b3BcXGJyZXp6XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiQzpcXFVzZXJzXFxCcmV6Z28tMTA5OFxcRGVza3RvcFxcYnJlenpcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyIjsKLy8gQ29weXJpZ2h0IChjKSAyMDIwIERpcmsgSG9sdHdpY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuIGh0dHBzOi8vaG9sdHdpY2suZGUvY29weXJpZ2h0CmltcG9ydCBTaW1wbGVQZWVyIGZyb20gJ3NpbXBsZS1wZWVyJzsKaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vbGliL2Fzc2VydCc7CmltcG9ydCB7IGNsb25lT2JqZWN0IH0gZnJvbSAnLi4vbGliL2Jhc2UnOwppbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vbGliL2VtaXR0ZXInOwoKdmFyIGxvZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2FwcDp3ZWJydGMtcGVlcicpOwoKdmFyIGN0ciA9IDE7CmV4cG9ydCB2YXIgV2ViUlRDUGVlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0VtaXR0ZXIpIHsKICBfaW5oZXJpdHMoV2ViUlRDUGVlciwgX0VtaXR0ZXIpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFdlYlJUQ1BlZXIpOwoKICBfY3JlYXRlQ2xhc3MoV2ViUlRDUGVlciwgbnVsbCwgW3sKICAgIGtleTogImlzU3VwcG9ydGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHsKICAgICAgcmV0dXJuIFNpbXBsZVBlZXIuV0VCUlRDX1NVUFBPUlQ7CiAgICB9CiAgfV0pOwoKICBmdW5jdGlvbiBXZWJSVENQZWVyKCkgewogICAgdmFyIF90aGlzOwoKICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSwKICAgICAgICByZW1vdGUgPSBfcmVmLnJlbW90ZSwKICAgICAgICBsb2NhbCA9IF9yZWYubG9jYWwsCiAgICAgICAgb3B0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsicmVtb3RlIiwgImxvY2FsIl0pOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJSVENQZWVyKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMucmVtb3RlID0gcmVtb3RlOwogICAgX3RoaXMubG9jYWwgPSBsb2NhbDsKICAgIF90aGlzLmluaXRpYXRvciA9IG9wdC5pbml0aWF0b3I7CiAgICBfdGhpcy5pZCA9ICd3ZWJydGMtcGVlcicgKyBjdHIrKzsKICAgIGxvZygncGVlcicsIF90aGlzLmlkKTsKCiAgICBfdGhpcy5zZXR1cFBlZXIob3B0KTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoV2ViUlRDUGVlciwgW3sKICAgIGtleTogInNldHVwUGVlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBQZWVyKG9wdCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuZXJyb3IgPSBudWxsOwogICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOwogICAgICB0aGlzLnN0cmVhbSA9IG51bGw7CiAgICAgIHZhciBvcHRzID0gY2xvbmVPYmplY3QoX29iamVjdFNwcmVhZCh7fSwgb3B0LCB7CiAgICAgICAgLy8gQWxsb3cgdGhlIHBlZXIgdG8gcmVjZWl2ZSB2aWRlbywgZXZlbiBpZiBpdCdzIG5vdCBzZW5kaW5nIHN0cmVhbToKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL3NpbXBsZS1wZWVyL2lzc3Vlcy85NQogICAgICAgIG9mZmVyQ29uc3RyYWludHM6IHsKICAgICAgICAgIG9mZmVyVG9SZWNlaXZlQXVkaW86IHRydWUsCiAgICAgICAgICBvZmZlclRvUmVjZWl2ZVZpZGVvOiB0cnVlCiAgICAgICAgfQogICAgICB9KSk7CiAgICAgIGxvZygnU2ltcGxlUGVlciBvcHRzOicsIG9wdHMpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL3NpbXBsZS1wZWVyL2Jsb2IvbWFzdGVyL1JFQURNRS5tZAoKICAgICAgdGhpcy5wZWVyID0gbmV3IFNpbXBsZVBlZXIob3B0cyk7CiAgICAgIHRoaXMucGVlci5vbignY2xvc2UnLCBmdW5jdGlvbiAoXykgewogICAgICAgIHJldHVybiBfdGhpczIuY2xvc2UoKTsKICAgICAgfSk7IC8vIFdlIHJlY2VpdmUgYSBjb25uZWN0aW9uIGVycm9yCgogICAgICB0aGlzLnBlZXIub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikgewogICAgICAgIGxvZygiIi5jb25jYXQoX3RoaXMyLmlkLCAiIHwgZXJyb3IiKSwgZXJyKTsKICAgICAgICBfdGhpczIuZXJyb3IgPSBlcnI7CgogICAgICAgIF90aGlzMi5lbWl0KCdlcnJvcicsIGVycik7CgogICAgICAgIF90aGlzMi5jbG9zZSgpOwoKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMi5zZXR1cFBlZXIob3B0KTsgLy8gPz8/CgogICAgICAgIH0sIDEwMDApOwogICAgICB9KTsgLy8gVGhpcyBtZWFucywgd2UgcmVjZWl2ZWQgbmV0d29yayBkZXRhaWxzIChzaWduYWwpIHdlIG5lZWQgdG8gcHJvdmlkZQogICAgICAvLyB0aGUgcmVtb3RlIHBlZXIsIHNvIGhlIGNhbiBzZXQgdXAgYSBjb25uZWN0aW9uIHRvIHVzLiBVc3VhbGx5IHdlIHdpbGwKICAgICAgLy8gc2VuZCB0aGlzIG92ZXIgYSBzZXBhcmF0ZSBjaGFubmVsIGxpa2UgdGhlIHdlYiBzb2NrZXQgc2lnbmFsaW5nIHNlcnZlcgoKICAgICAgdGhpcy5wZWVyLm9uKCdzaWduYWwnLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIC8vIGxvZyhgJHt0aGlzLmlkfSB8IHNpZ25hbGAsIHRoaXMuaW5pdGlhdG9yKQogICAgICAgIF90aGlzMi5lbWl0KCdzaWduYWwnLCBkYXRhKTsKICAgICAgfSk7IC8vIFdlIHJlY2VpdmVkIGRhdGEgZnJvbSB0aGUgcGVlcgoKICAgICAgdGhpcy5wZWVyLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBsb2coIiIuY29uY2F0KF90aGlzMi5pZCwgIiB8IGRhdGEiKSwgZGF0YSk7CgogICAgICAgIF90aGlzMi5lbWl0KCdkYXRhJywgZGF0YSk7CgogICAgICAgIF90aGlzMi5lbWl0KCdtZXNzYWdlJywgewogICAgICAgICAgZGF0YTogZGF0YQogICAgICAgIH0pOyAvLyBDaGFubmVsIGNvbXBhdAoKICAgICAgfSk7IC8vIENvbm5lY3Rpb24gc3VjY2VlZGVkCgogICAgICB0aGlzLnBlZXIub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBsb2coIiIuY29uY2F0KF90aGlzMi5pZCwgIiB8IGNvbm5lY3QiKSwgZXZlbnQpOwogICAgICAgIF90aGlzMi5hY3RpdmUgPSB0cnVlOyAvLyBwLnNlbmQoJ3doYXRldmVyJyArIE1hdGgucmFuZG9tKCkpCgogICAgICAgIF90aGlzMi5lbWl0KCdjb25uZWN0JywgZXZlbnQpOwogICAgICB9KTsKICAgICAgdGhpcy5wZWVyLm9uKCdzdHJlYW0nLCBmdW5jdGlvbiAoc3RyZWFtKSB7CiAgICAgICAgbG9nKCduZXcgc3RyZWFtJywgc3RyZWFtKTsKICAgICAgICBfdGhpczIuc3RyZWFtID0gc3RyZWFtOwoKICAgICAgICBfdGhpczIuZW1pdCgnc3RyZWFtJywgc3RyZWFtKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0U3RyZWFtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdHJlYW0oc3RyZWFtKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLnBlZXIuc3RyZWFtcy5pbmNsdWRlcyhzdHJlYW0pKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoaXMucGVlci5zdHJlYW1zLmZvckVhY2goZnVuY3Rpb24gKHMpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5wZWVyLnJlbW92ZVN0cmVhbShzKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcignRXhjZXB0aW9uIHNldFN0cmVhbSByZW1vdmU6JywgZXJyKTsKICAgICAgICB9CgogICAgICAgIGlmIChzdHJlYW0pIHsKICAgICAgICAgIGFzc2VydChzdHJlYW0sICdFeHBlY3RlZCBhIHN0cmVhbScpOwogICAgICAgICAgdGhpcy5wZWVyLmFkZFN0cmVhbShzdHJlYW0pOwogICAgICAgIH0KICAgICAgfQogICAgfSAvLyBXZSBnb3QgYSBzaWduYWwgZnJvbSB0aGUgcmVtb3RlIHBlZXIgYW5kIHdpbGwgdXNlIGl0IG5vdyB0byBlc3RhYmxpc2ggdGhlIGNvbm5lY3Rpb24KCiAgfSwgewogICAga2V5OiAic2lnbmFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaWduYWwoZGF0YSkgewogICAgICBpZiAodGhpcy5wZWVyICYmICF0aGlzLnBlZXIuZGVzdHJveWVkKSB7CiAgICAgICAgdGhpcy5wZWVyLnNpZ25hbChkYXRhKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsb2coJ1RyaWVkIHRvIHNldCBzaWduYWwgb24gZGVzdHJveWVkIHBlZXInLCB0aGlzLnBlZXIsIGRhdGEpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicG9zdE1lc3NhZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGRhdGEpIHsKICAgICAgLy8gQ2hhbm5lbCBjb21wYXQKICAgICAgdGhpcy5wZWVyLnNlbmQoZGF0YSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkgewogICAgICB2YXIgX3RoaXMkcGVlcjsKCiAgICAgIHRoaXMuZW1pdCgnY2xvc2UnKTsKICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsKICAgICAgKF90aGlzJHBlZXIgPSB0aGlzLnBlZXIpID09PSBudWxsIHx8IF90aGlzJHBlZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHBlZXIuZGVzdHJveSgpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFdlYlJUQ1BlZXI7Cn0oRW1pdHRlcik7"},null]}