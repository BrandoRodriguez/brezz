{"remainingRequest":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\blur.js","dependencies":[{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\blur.js","mtime":1587032502000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxVc2Vyc1xcQnJlemdvLTEwOThcXERlc2t0b3BcXGJyZXp6XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGZqcy1tb2RlbHMvdHJlZS9tYXN0ZXIvYm9keS1waXgjYm9keXBpeGRyYXdib2tlaGVmZmVjdAovLyBodHRwczovL2dpdGh1Yi5jb20vdGVuc29yZmxvdy90ZmpzLW1vZGVscy9ibG9iL2I3MmMxMGJkYmRlYzZiMDRhMTNmNzgwMTgwZWQ5MDQ3MzZmYTUyYTUvYm9keS1waXgvZGVtb3MvaW5kZXguanMjTDUxNwovLyBodHRwczovL3d3dy50ZW5zb3JmbG93Lm9yZy9qcy9tb2RlbHMKaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vbGliL2Fzc2VydCc7Cgp2YXIgYm9keVBpeCA9IHJlcXVpcmUoJ0B0ZW5zb3JmbG93LW1vZGVscy9ib2R5LXBpeCcpOwoKdmFyIGxvZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2FwcDpibHVyJyk7Cgp2YXIgYW5pbWF0aW9uRnJhbWVSZXF1ZXN0Owp2YXIgdmlkZW9FbCwgb3V0cHV0RWwsIGNhcHR1cmVTdHJlYW07CgpmdW5jdGlvbiBzdGFydFRyYW5zZm9ybWVyKF94LCBfeDIpIHsKICByZXR1cm4gX3N0YXJ0VHJhbnNmb3JtZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX3N0YXJ0VHJhbnNmb3JtZXIoKSB7CiAgX3N0YXJ0VHJhbnNmb3JtZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHZpZGVvRWwsIG91dHB1dEVsKSB7CiAgICB2YXIgbmV0LCBiYWNrZ3JvdW5kQmx1ckFtb3VudCwgZWRnZUJsdXJBbW91bnQsIGZsaXBIb3Jpem9udGFsLCBzdGVwLCBfc3RlcDsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfc3RlcCA9IGZ1bmN0aW9uIF9zdGVwMygpIHsKICAgICAgICAgICAgICBfc3RlcCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICAgICAgICAgIHZhciBzZWdtZW50YXRpb247CiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV0LnNlZ21lbnRQZXJzb24odmlkZW9FbCk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50YXRpb24gPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICBib2R5UGl4LmRyYXdCb2tlaEVmZmVjdChvdXRwdXRFbCwgdmlkZW9FbCwgc2VnbWVudGF0aW9uLCBiYWNrZ3JvdW5kQmx1ckFtb3VudCwgZWRnZUJsdXJBbW91bnQsIGZsaXBIb3Jpem9udGFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWVSZXF1ZXN0ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9zdGVwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBzdGVwID0gZnVuY3Rpb24gX3N0ZXAyKCkgewogICAgICAgICAgICAgIHJldHVybiBfc3RlcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICByZXR1cm4gYm9keVBpeC5sb2FkKCk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBuZXQgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgYmFja2dyb3VuZEJsdXJBbW91bnQgPSAzOwogICAgICAgICAgICBlZGdlQmx1ckFtb3VudCA9IDM7CiAgICAgICAgICAgIGZsaXBIb3Jpem9udGFsID0gZmFsc2U7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTA7CiAgICAgICAgICAgIHJldHVybiBzdGVwKCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKICByZXR1cm4gX3N0YXJ0VHJhbnNmb3JtZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gc3RvcFRyYW5zZm9ybWVyKCkgewogIGlmIChhbmltYXRpb25GcmFtZVJlcXVlc3QpIHsKICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lUmVxdWVzdCk7CiAgICBhbmltYXRpb25GcmFtZVJlcXVlc3QgPSBudWxsOwogIH0KfQoKZnVuY3Rpb24gc2V0VmlkZW9TdHJlYW0odmlkZW9FbCwgc3RyZWFtKSB7CiAgdmlkZW9FbC5zcmNPYmplY3QgPSBzdHJlYW07IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5zb3JmbG93L3RmanMtbW9kZWxzL2Jsb2IvYjcyYzEwYmRiZGVjNmIwNGExM2Y3ODAxODBlZDkwNDczNmZhNTJhNS9ib2R5LXBpeC9kZW1vcy9pbmRleC5qcyNMMTE3CgogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgdmlkZW9FbC5vbmxvYWRlZG1ldGFkYXRhID0gZnVuY3Rpb24gKCkgewogICAgICB2aWRlb0VsLndpZHRoID0gdmlkZW9FbC52aWRlb1dpZHRoOwogICAgICB2aWRlb0VsLmhlaWdodCA9IHZpZGVvRWwudmlkZW9IZWlnaHQ7CiAgICAgIHZpZGVvRWwub25sb2FkZWRtZXRhZGF0YSA9IHVuZGVmaW5lZDsKICAgICAgcmVzb2x2ZSh2aWRlb0VsKTsKICAgIH07CiAgfSk7Cn0KCmZ1bmN0aW9uIHN0b3BFeGlzdGluZ1ZpZGVvQ2FwdHVyZSh2aWRlb0VsKSB7CiAgaWYgKHZpZGVvRWwgJiYgdmlkZW9FbC5zcmNPYmplY3QpIHsKICAgIC8vIHZpZGVvRWwuc3JjT2JqZWN0LmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4gewogICAgLy8gICB0cmFjay5zdG9wKCkKICAgIC8vIH0pCiAgICB2aWRlb0VsLnNyY09iamVjdCA9IG51bGw7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gc3RvcEJsdXJUcmFuc2Zvcm0oKSB7CiAgbG9nKCdzdG9wQmx1clRyYW5zZm9ybScpOwogIHN0b3BUcmFuc2Zvcm1lcigpOwogIHN0b3BFeGlzdGluZ1ZpZGVvQ2FwdHVyZSh2aWRlb0VsKTsKfQpleHBvcnQgZnVuY3Rpb24gc3RhcnRCbHVyVHJhbnNmb3JtKF94MykgewogIHJldHVybiBfc3RhcnRCbHVyVHJhbnNmb3JtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9zdGFydEJsdXJUcmFuc2Zvcm0oKSB7CiAgX3N0YXJ0Qmx1clRyYW5zZm9ybSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoc3RyZWFtKSB7CiAgICB2YXIgZWw7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDA7CiAgICAgICAgICAgIHN0b3BCbHVyVHJhbnNmb3JtKCk7CgogICAgICAgICAgICBpZiAoIXN0cmVhbSkgewogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxvZygnc3RhcnRCbHVyVHJhbnNmb3JtJyk7CgogICAgICAgICAgICBpZiAoIXZpZGVvRWwgfHwgIW91dHB1dEVsKSB7CiAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgLy8gZWwuY2xhc3NOYW1lID0gJ3RyYW5zZm9ybSBkZWJ1Z1RyYW5zZm9ybScKCiAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gIlxuICAgICAgICA8dmlkZW8gaWQ9XCJ0cmFuc2Zvcm1WaWRlb1wiIHBsYXlzaW5saW5lPjwvdmlkZW8+XG4gICAgICAgIDxjYW52YXMgaWQ9XCJ0cmFuc2Zvcm1PdXRwdXRcIj48L2NhbnZhcz5cbiAgICAgICI7CiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7CiAgICAgICAgICAgICAgdmlkZW9FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmFuc2Zvcm1WaWRlbycpOwogICAgICAgICAgICAgIG91dHB1dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RyYW5zZm9ybU91dHB1dCcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBhc3NlcnQodmlkZW9FbCwgJ2V4cGVjdCB2aWRlb0VsJyk7CiAgICAgICAgICAgIGFzc2VydChvdXRwdXRFbCwgJ2V4cGVjdCB2aWRlb0VsJyk7CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTsKICAgICAgICAgICAgcmV0dXJuIHNldFZpZGVvU3RyZWFtKHZpZGVvRWwsIHN0cmVhbSk7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDExOwogICAgICAgICAgICByZXR1cm4gc3RhcnRUcmFuc2Zvcm1lcih2aWRlb0VsLCBvdXRwdXRFbCk7CgogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMzsKICAgICAgICAgICAgcmV0dXJuIHZpZGVvRWwucGxheSgpOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIGlmICghY2FwdHVyZVN0cmVhbSkgewogICAgICAgICAgICAgIGNhcHR1cmVTdHJlYW0gPSBvdXRwdXRFbC5jYXB0dXJlU3RyZWFtKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBjYXB0dXJlU3RyZWFtKTsKCiAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIwOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDE3OwogICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0V4Y2VwdGlvbjonLCBfY29udGV4dDMudDApOwoKICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBzdHJlYW0pOwoKICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzAsIDE3XV0pOwogIH0pKTsKICByZXR1cm4gX3N0YXJ0Qmx1clRyYW5zZm9ybS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},{"version":3,"sources":["C:/Users/Brezgo-1098/Desktop/brezz/src/logic/blur.js"],"names":["assert","bodyPix","require","log","animationFrameRequest","videoEl","outputEl","captureStream","startTransformer","step","net","segmentPerson","segmentation","drawBokehEffect","backgroundBlurAmount","edgeBlurAmount","flipHorizontal","requestAnimationFrame","load","stopTransformer","cancelAnimationFrame","setVideoStream","stream","srcObject","Promise","resolve","onloadedmetadata","width","videoWidth","height","videoHeight","undefined","stopExistingVideoCapture","stopBlurTransform","startBlurTransform","el","document","createElement","innerHTML","body","appendChild","getElementById","play","console","error"],"mappings":";;;AAAA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,eAAvB;;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAAC,6BAAD,CAAvB;;AAEA,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,UAAjB,CAAZ;;AAEA,IAAIE,qBAAJ;AACA,IAAIC,OAAJ,EAAaC,QAAb,EAAuBC,aAAvB;;SAEeC,gB;;;;;8EAAf,kBAAgCH,OAAhC,EAAyCC,QAAzC;AAAA,mEAMiBG,IANjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC6BC,GAAG,CAACC,aAAJ,CAAkBN,OAAlB,CAD7B;;AAAA;AACQO,wBAAAA,YADR;AAEEX,wBAAAA,OAAO,CAACY,eAAR,CACEP,QADF,EAEED,OAFF,EAGEO,YAHF,EAIEE,oBAJF,EAKEC,cALF,EAMEC,cANF;AAQAZ,wBAAAA,qBAAqB,GAAGa,qBAAqB,CAACR,IAAD,CAA7C;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF;AAAA;AAAA;;AAMiBA,YAAAA,IANjB;AAAA;AAAA;;AAAA;AAAA,mBACoBR,OAAO,CAACiB,IAAR,EADpB;;AAAA;AACQR,YAAAA,GADR;AAEQI,YAAAA,oBAFR,GAE+B,CAF/B;AAGQC,YAAAA,cAHR,GAGyB,CAHzB;AAIQC,YAAAA,cAJR,GAIyB,KAJzB;AAAA;AAAA,mBAmBQP,IAAI,EAnBZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBA,SAASU,eAAT,GAA2B;AACzB,MAAIf,qBAAJ,EAA2B;AACzBgB,IAAAA,oBAAoB,CAAChB,qBAAD,CAApB;AACAA,IAAAA,qBAAqB,GAAG,IAAxB;AACD;AACF;;AAED,SAASiB,cAAT,CAAwBhB,OAAxB,EAAiCiB,MAAjC,EAAyC;AACvCjB,EAAAA,OAAO,CAACkB,SAAR,GAAoBD,MAApB,CADuC,CAGvC;;AACA,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BpB,IAAAA,OAAO,CAACqB,gBAAR,GAA2B,YAAM;AAC/BrB,MAAAA,OAAO,CAACsB,KAAR,GAAgBtB,OAAO,CAACuB,UAAxB;AACAvB,MAAAA,OAAO,CAACwB,MAAR,GAAiBxB,OAAO,CAACyB,WAAzB;AACAzB,MAAAA,OAAO,CAACqB,gBAAR,GAA2BK,SAA3B;AACAN,MAAAA,OAAO,CAACpB,OAAD,CAAP;AACD,KALD;AAMD,GAPM,CAAP;AAQD;;AAED,SAAS2B,wBAAT,CAAkC3B,OAAlC,EAA2C;AACzC,MAAIA,OAAO,IAAIA,OAAO,CAACkB,SAAvB,EAAkC;AAChC;AACA;AACA;AACAlB,IAAAA,OAAO,CAACkB,SAAR,GAAoB,IAApB;AACD;AACF;;AAED,OAAO,SAASU,iBAAT,GAA6B;AAClC9B,EAAAA,GAAG,CAAC,mBAAD,CAAH;AACAgB,EAAAA,eAAe;AACfa,EAAAA,wBAAwB,CAAC3B,OAAD,CAAxB;AACD;AAED,gBAAsB6B,kBAAtB;AAAA;AAAA;;;gFAAO,kBAAkCZ,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHW,YAAAA,iBAAiB;;AAFd,iBAICX,MAJD;AAAA;AAAA;AAAA;;AAKDnB,YAAAA,GAAG,CAAC,oBAAD,CAAH;;AAEA,gBAAI,CAACE,OAAD,IAAY,CAACC,QAAjB,EAA2B;AACrB6B,cAAAA,EADqB,GAChBC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CADgB,EAEzB;;AACAF,cAAAA,EAAE,CAACG,SAAH;AAIAF,cAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0BL,EAA1B;AAEA9B,cAAAA,OAAO,GAAG+B,QAAQ,CAACK,cAAT,CAAwB,gBAAxB,CAAV;AACAnC,cAAAA,QAAQ,GAAG8B,QAAQ,CAACK,cAAT,CAAwB,iBAAxB,CAAX;AACD;;AAEDzC,YAAAA,MAAM,CAACK,OAAD,EAAU,gBAAV,CAAN;AACAL,YAAAA,MAAM,CAACM,QAAD,EAAW,gBAAX,CAAN;AArBC;AAAA,mBAuBKe,cAAc,CAAChB,OAAD,EAAUiB,MAAV,CAvBnB;;AAAA;AAAA;AAAA,mBAwBKd,gBAAgB,CAACH,OAAD,EAAUC,QAAV,CAxBrB;;AAAA;AAAA;AAAA,mBA0BKD,OAAO,CAACqC,IAAR,EA1BL;;AAAA;AA4BD,gBAAI,CAACnC,aAAL,EAAoB;AAClBA,cAAAA,aAAa,GAAGD,QAAQ,CAACC,aAAT,EAAhB;AACD;;AA9BA,8CAgCMA,aAhCN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmCHoC,YAAAA,OAAO,CAACC,KAAR,CAAc,YAAd;;AAnCG;AAAA,8CAsCEtB,MAtCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// https://github.com/tensorflow/tfjs-models/tree/master/body-pix#bodypixdrawbokeheffect\n// https://github.com/tensorflow/tfjs-models/blob/b72c10bdbdec6b04a13f780180ed904736fa52a5/body-pix/demos/index.js#L517\n// https://www.tensorflow.org/js/models\n\nimport { assert } from '../lib/assert'\n\nconst bodyPix = require('@tensorflow-models/body-pix')\n\nconst log = require('debug')('app:blur')\n\nlet animationFrameRequest\nlet videoEl, outputEl, captureStream\n\nasync function startTransformer(videoEl, outputEl) {\n  const net = await bodyPix.load()\n  const backgroundBlurAmount = 3\n  const edgeBlurAmount = 3\n  const flipHorizontal = false\n\n  async function step() {\n    const segmentation = await net.segmentPerson(videoEl)\n    bodyPix.drawBokehEffect(\n      outputEl,\n      videoEl,\n      segmentation,\n      backgroundBlurAmount,\n      edgeBlurAmount,\n      flipHorizontal,\n    )\n    animationFrameRequest = requestAnimationFrame(step)\n  }\n\n  await step()\n}\n\nfunction stopTransformer() {\n  if (animationFrameRequest) {\n    cancelAnimationFrame(animationFrameRequest)\n    animationFrameRequest = null\n  }\n}\n\nfunction setVideoStream(videoEl, stream) {\n  videoEl.srcObject = stream\n\n  // https://github.com/tensorflow/tfjs-models/blob/b72c10bdbdec6b04a13f780180ed904736fa52a5/body-pix/demos/index.js#L117\n  return new Promise((resolve) => {\n    videoEl.onloadedmetadata = () => {\n      videoEl.width = videoEl.videoWidth\n      videoEl.height = videoEl.videoHeight\n      videoEl.onloadedmetadata = undefined\n      resolve(videoEl)\n    }\n  })\n}\n\nfunction stopExistingVideoCapture(videoEl) {\n  if (videoEl && videoEl.srcObject) {\n    // videoEl.srcObject.getTracks().forEach(track => {\n    //   track.stop()\n    // })\n    videoEl.srcObject = null\n  }\n}\n\nexport function stopBlurTransform() {\n  log('stopBlurTransform')\n  stopTransformer()\n  stopExistingVideoCapture(videoEl)\n}\n\nexport async function startBlurTransform(stream) {\n  try {\n    stopBlurTransform()\n\n    if (stream) {\n      log('startBlurTransform')\n\n      if (!videoEl || !outputEl) {\n        let el = document.createElement('div')\n        // el.className = 'transform debugTransform'\n        el.innerHTML = `\n        <video id=\"transformVideo\" playsinline></video>\n        <canvas id=\"transformOutput\"></canvas>\n      `\n        document.body.appendChild(el)\n\n        videoEl = document.getElementById('transformVideo')\n        outputEl = document.getElementById('transformOutput')\n      }\n\n      assert(videoEl, 'expect videoEl')\n      assert(outputEl, 'expect videoEl')\n\n      await setVideoStream(videoEl, stream)\n      await startTransformer(videoEl, outputEl)\n\n      await videoEl.play()\n\n      if (!captureStream) {\n        captureStream = outputEl.captureStream()\n      }\n\n      return captureStream\n    }\n  } catch (err) {\n    console.error('Exception:', err)\n  }\n\n  return stream\n}\n"]}]}