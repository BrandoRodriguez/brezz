{"remainingRequest":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\webrtc.js","dependencies":[{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\webrtc.js","mtime":1587032502000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}