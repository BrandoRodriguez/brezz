{"remainingRequest":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\webrtc.js","dependencies":[{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\webrtc.js","mtime":1587032502000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Brezgo-1098/Desktop/brezz/src/logic/webrtc.js"],"names":["io","SIGNAL_SERVER_URL","assert","Emitter","WebRTCPeer","log","require","WebRTC","isSupported","wrtc","room","peerSettings","on","id","emit","online","peer","peerConnections","close","updateStatus","peers","local","from","to","signal","initiator","handlePeer","remote","i","length","fn","Object","values","forEach","status","map","active","error","data","JSON","parse","type","msg","_","forEachPeer","postMessage","stringify"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Dirk Holtwick. All rights reserved. https://holtwick.de/copyright\n\nimport io from 'socket.io-client'\nimport { SIGNAL_SERVER_URL } from '../config'\nimport { assert } from '../lib/assert'\nimport { Emitter } from '../lib/emitter'\nimport { WebRTCPeer } from './webrtc-peer'\n\nconst log = require('debug')('app:webrtc')\n\n// Handles multiple connections, one to each peer\nexport class WebRTC extends Emitter {\n\n  peerConnections = {}\n  peerSettings = {}\n\n  static isSupported() {\n    return WebRTCPeer.isSupported()\n  }\n\n  constructor({\n                wrtc, // wrtc is used for unit testing via node.js\n                room = null,\n                peerSettings = {},\n              } = {}) {\n    super()\n    assert(room, 'room cannot be empty')\n\n    this.peerSettings = peerSettings\n\n    log('webrtc reaches out to', SIGNAL_SERVER_URL)\n\n    // https://socket.io/docs/client-api/\n    this.io = io(SIGNAL_SERVER_URL, {\n      // transports: ['websocket'],\n    })\n    assert(this.io, `should not fail to reach out to ${SIGNAL_SERVER_URL}`)\n\n    this.io.on('connect', () => {\n      log('connect', this.io.id)\n      this.emit('io', {\n        online: true,\n      })\n      this.emit('connect')\n      this.io.emit('join', { room })\n    })\n\n    this.io.on('disconnect', () => {\n      log('disconnect')\n      this.emit('io', {\n        online: false,\n      })\n      this.emit('disconnect')\n    })\n\n    this.io.on('remove', ({ id }) => {\n      let peer = this.peerConnections[id]\n      if (peer) {\n        peer.close()\n        delete this.peerConnections[id]\n        this.updateStatus()\n        this.emit('disconnected', { peer })\n      }\n    })\n\n    // Receive all other currently available peers\n    this.io.on('joined', ({ room, peers }) => {\n      const local = this.io.id\n      log('me', local, room, 'peers', peers)\n\n      // We will try to establish a separate connection to all of them\n      // If the new participant (us) initiates the connections, the others do\n      // not need to get updates about new peers\n      this.io.on('signal', ({ from, to, signal, initiator }) => {\n        // log('received signal', from, to === local, initiator)\n        // If we are not already connected, do it now\n        let peer = this.peerConnections[from]\n        if (!peer) {\n          peer = this.handlePeer({\n            remote: from,\n            local,\n            initiator: false,\n            wrtc,\n          })\n        }\n        peer.signal(signal)\n        this.updateStatus()\n      })\n\n      for (let i = 0; i < peers.length; i++) {\n        const remote = peers[i]\n        this.handlePeer({\n          remote,\n          local,\n          initiator: true,\n          wrtc,\n        })\n      }\n\n      this.updateStatus()\n    })\n  }\n\n  forEachPeer(fn) {\n    Object.values(this.peerConnections).forEach(fn)\n  }\n\n  updateStatus() {\n    let status = Object.values(this.peerConnections).map(peer => {\n      let { active, initiator, local, remote, error } = peer\n      return {\n        active, initiator, local, remote, error, peer,\n      }\n    })\n    this.emit('status', { status })\n  }\n\n  getPeer(id) {\n    return this.peerConnections[id] || null\n  }\n\n  handlePeer({ remote, wrtc, local, initiator = false } = {}) {\n    let peer = new WebRTCPeer({\n      local,\n      remote,\n      initiator,\n      wrtc,\n      ...this.peerSettings,\n    })\n\n    this.peerConnections[remote] = peer\n\n    // We received the local signal (i.e. network location description) that\n    // we will now send via web socket signaling server to the remote peer\n    peer.on('signal', signal => {\n      // log('received peer signal', remote)\n      this.io.emit('signal', {\n        from: local,\n        to: remote,\n        signal,\n        initiator,\n      })\n    })\n\n    // The full connection is established, from now on we can exchange data\n    peer.on('connect', () => {\n      this.emit('connected', { peer })\n      this.updateStatus()\n    })\n\n    // A message from the remote peer\n    peer.on('data', data => { // depr\n      let { type, ...msg } = JSON.parse(data)\n      this.emit(type, msg)\n    })\n\n    peer.on('message', data => {\n      this.emit('message', data)  // Channel compat\n    })\n\n    peer.on('stream', _ => this.updateStatus())\n    peer.on('track', _ => this.updateStatus())\n\n    return peer\n  }\n\n  postMessage(data) {  // Channel compat\n    this.forEachPeer(peer => {\n      peer.postMessage(data)\n    })\n  }\n\n  send(type, msg = {}) {  // depr\n    this.postMessage(JSON.stringify({ ...msg, type }))\n  }\n\n  close() {\n    this.forEachPeer(peer => peer.close())\n    this.peerConnections = {}\n    this.io.close()\n  }\n\n  async cleanup() {\n    // await super.cleanup()\n    this.close()\n  }\n\n}\n"]}]}