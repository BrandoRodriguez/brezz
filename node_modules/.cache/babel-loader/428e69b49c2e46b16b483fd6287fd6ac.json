{"remainingRequest":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\connection.js","dependencies":[{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\src\\logic\\connection.js","mtime":1587032502000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Brezgo-1098\\Desktop\\brezz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxVc2Vyc1xcQnJlemdvLTEwOThcXERlc2t0b3BcXGJyZXp6XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKLy8gaHR0cHM6Ly93ZWJydGNoYWNrcy5jb20vbGltaXQtd2VicnRjLWJhbmR3aWR0aC1zZHAvCmltcG9ydCB7IG1lc3NhZ2VzIH0gZnJvbSAnLi4vbGliL2VtaXR0ZXInOwoKdmFyIGxvZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2FwcDpjb25uZWN0aW9uJyk7CgpmdW5jdGlvbiBzZXRNZWRpYUJpdHJhdGUoc2RwLCBtZWRpYSwgYml0cmF0ZSkgewogIHZhciBsaW5lcyA9IHNkcC5zcGxpdCgnXG4nKTsKICB2YXIgbGluZSA9IC0xOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7CiAgICBpZiAobGluZXNbaV0uaW5kZXhPZignbT0nICsgbWVkaWEpID09PSAwKSB7CiAgICAgIGxpbmUgPSBpOwogICAgICBicmVhazsKICAgIH0KICB9CgogIGlmIChsaW5lID09PSAtMSkgewogICAgLy8gbG9nKCdDb3VsZCBub3QgZmluZCB0aGUgbSBsaW5lIGZvcicsIG1lZGlhKQogICAgcmV0dXJuIHNkcDsKICB9IC8vIGxvZygnRm91bmQgdGhlIG0gbGluZSBmb3InLCBtZWRpYSwgJ2F0IGxpbmUnLCBsaW5lKQogIC8vIFBhc3MgdGhlIG0gbGluZQoKCiAgbGluZSsrOyAvLyBTa2lwIGkgYW5kIGMgbGluZXMKCiAgd2hpbGUgKGxpbmVzW2xpbmVdLmluZGV4T2YoJ2k9JykgPT09IDAgfHwgbGluZXNbbGluZV0uaW5kZXhPZignYz0nKSA9PT0gMCkgewogICAgbGluZSsrOwogIH0gLy8gSWYgd2UncmUgb24gYSBiIGxpbmUsIHJlcGxhY2UgaXQKCgogIGlmIChsaW5lc1tsaW5lXS5pbmRleE9mKCdiJykgPT09IDApIHsKICAgIC8vIGxvZygnUmVwbGFjZWQgYiBsaW5lIGF0IGxpbmUnLCBsaW5lKQogICAgbGluZXNbbGluZV0gPSAnYj1BUzonICsgYml0cmF0ZTsKICAgIHJldHVybiBsaW5lcy5qb2luKCdcbicpOwogIH0gLy8gQWRkIGEgbmV3IGIgbGluZQogIC8vIGxvZygnQWRkaW5nIG5ldyBiIGxpbmUgYmVmb3JlIGxpbmUnLCBsaW5lKQoKCiAgdmFyIG5ld0xpbmVzID0gbGluZXMuc2xpY2UoMCwgbGluZSk7CiAgbmV3TGluZXMucHVzaCgnYj1BUzonICsgYml0cmF0ZSk7CiAgbmV3TGluZXMgPSBuZXdMaW5lcy5jb25jYXQobGluZXMuc2xpY2UobGluZSwgbGluZXMubGVuZ3RoKSk7CiAgcmV0dXJuIG5ld0xpbmVzLmpvaW4oJ1xuJyk7Cn0gLy8gZnVuY3Rpb24gaXNGaXJlZm94KCkgewovLyAgIHJldHVybiBuYXZpZ2F0b3I/LnVzZXJBZ2VudD8uaW5jbHVkZXMoJ0ZpcmVmb3gvJykKLy8gfQovLwovLyBmdW5jdGlvbiB1cGRhdGVCYW5kd2lkdGhSZXN0cmljdGlvbihzZHAsIGJhbmR3aWR0aCkgewovLyAgIGxldCBtb2RpZmllciA9ICdBUycKLy8gICBpZiAoaXNGaXJlZm94KCkpIHsKLy8gICAgIGJhbmR3aWR0aCA9IChiYW5kd2lkdGggPj4+IDApICogMTAwMAovLyAgICAgbW9kaWZpZXIgPSAnVElBUycKLy8gICB9Ci8vICAgaWYgKHNkcC5pbmRleE9mKCdiPScgKyBtb2RpZmllciArICc6JykgPT09IC0xKSB7Ci8vICAgICAvLyBpbnNlcnQgYj0gYWZ0ZXIgYz0gbGluZS4KLy8gICAgIHNkcCA9IHNkcC5yZXBsYWNlKC9jPUlOICguKilcclxuLywgJ2M9SU4gJDFcclxuYj0nICsgbW9kaWZpZXIgKyAnOicgKyBiYW5kd2lkdGggKyAnXHJcbicpCi8vICAgfSBlbHNlIHsKLy8gICAgIHNkcCA9IHNkcC5yZXBsYWNlKG5ldyBSZWdFeHAoJ2I9JyArIG1vZGlmaWVyICsgJzouKlxyXG4nKSwgJ2I9JyArIG1vZGlmaWVyICsgJzonICsgYmFuZHdpZHRoICsgJ1xyXG4nKQovLyAgIH0KLy8gICByZXR1cm4gc2RwCi8vIH0KCgpmdW5jdGlvbiByZW1vdmVCYW5kd2lkdGhSZXN0cmljdGlvbihzZHApIHsKICByZXR1cm4gc2RwLnJlcGxhY2UoL2I9QVM6LipcclxuLywgJycpLnJlcGxhY2UoL2I9VElBUzouKlxyXG4vLCAnJyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBzZXR1cFdlYlJUQyhfeCkgewogIHJldHVybiBfc2V0dXBXZWJSVEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX3NldHVwV2ViUlRDKCkgewogIF9zZXR1cFdlYlJUQyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShzdGF0ZSkgewogICAgdmFyIF95aWVsZCRpbXBvcnQsIFdlYlJUQywgY29uZmlnLCB3ZWJydGM7CgogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgKICAgICAgICAgICAgLyogd2VicGFja0NodW5rTmFtZTogJ3dlYnJ0YycgKi8KICAgICAgICAgICAgJy4vd2VicnRjJyk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBfeWllbGQkaW1wb3J0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgV2ViUlRDID0gX3lpZWxkJGltcG9ydC5XZWJSVEM7CgogICAgICAgICAgICBpZiAoV2ViUlRDLmlzU3VwcG9ydGVkKCkpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBjb25maWcgPSB7CiAgICAgICAgICAgICAgaWNlVHJhbnNwb3J0UG9saWN5OiAnYWxsJywKICAgICAgICAgICAgICByZWNvbm5lY3RUaW1lcjogMzAwMCwKICAgICAgICAgICAgICBpY2VTZXJ2ZXJzOiBbewogICAgICAgICAgICAgICAgdXJsczogJ3N0dW46c3R1bi5icmllLmZpOjUzNDknCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdXJsczogJ3R1cm46c3R1bi5icmllLmZpOjUzNDknLAogICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdicmllJywKICAgICAgICAgICAgICAgIGNyZWRlbnRpYWw6ICdmaScKICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9OyAvLyBpZiAobG9jYWxTdG9yYWdlLnN0dW4pIHsKICAgICAgICAgICAgLy8gICBjb25maWcuaWNlU2VydmVycyA9IFt7CiAgICAgICAgICAgIC8vICAgICB1cmxzOiBsb2NhbFN0b3JhZ2Uuc3R1biwKICAgICAgICAgICAgLy8gICB9XQogICAgICAgICAgICAvLyB9CgogICAgICAgICAgICB3ZWJydGMgPSBuZXcgV2ViUlRDKHsKICAgICAgICAgICAgICByb29tOiBzdGF0ZS5yb29tLAogICAgICAgICAgICAgIHBlZXJTZXR0aW5nczogewogICAgICAgICAgICAgICAgdHJpY2tsZTogdHJ1ZSwKICAgICAgICAgICAgICAgIHNkcFRyYW5zZm9ybTogZnVuY3Rpb24gc2RwVHJhbnNmb3JtKHNkcCkgewogICAgICAgICAgICAgICAgICBsb2coJ3NkcFRyYW5zZm9ybScsIHN0YXRlLmJhbmR3aWR0aCk7IC8vICwgc2RwKQoKICAgICAgICAgICAgICAgICAgdmFyIG5ld1NEUCA9IHNkcDsKCiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5iYW5kd2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICAvLyAgIG5ld1NEUCA9IHVwZGF0ZUJhbmR3aWR0aFJlc3RyaWN0aW9uKHNkcCwgMTApCiAgICAgICAgICAgICAgICAgICAgLy8gbG9nKCdPbGQgU0RQJywgbmV3U0RQKQogICAgICAgICAgICAgICAgICAgIG5ld1NEUCA9IHNldE1lZGlhQml0cmF0ZShuZXdTRFAsICd2aWRlbycsIDIzMyk7CiAgICAgICAgICAgICAgICAgICAgbmV3U0RQID0gc2V0TWVkaWFCaXRyYXRlKG5ld1NEUCwgJ2F1ZGlvJywgODApOyAvLyBsb2coJ05ldyBTRFAnLCBuZXdTRFApCiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbmV3U0RQID0gcmVtb3ZlQmFuZHdpZHRoUmVzdHJpY3Rpb24oc2RwKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1NEUDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHdlYnJ0Yy5vbignc3RhdHVzJywgZnVuY3Rpb24gKGluZm8pIHsKICAgICAgICAgICAgICBzdGF0ZS5zdGF0dXMgPSBpbmZvLnN0YXR1czsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHdlYnJ0Yy5vbignY29ubmVjdGVkJywgZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICAgICAgICB2YXIgcGVlciA9IF9yZWYucGVlcjsKICAgICAgICAgICAgICBsb2coJ2Nvbm5lY3RlZCcsIHBlZXIpOwoKICAgICAgICAgICAgICBpZiAoc3RhdGUuc3RyZWFtKSB7CiAgICAgICAgICAgICAgICBwZWVyLnNldFN0cmVhbShzdGF0ZS5zdHJlYW0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG1lc3NhZ2VzLm9uKCdzZXRMb2NhbFN0cmVhbScsIGZ1bmN0aW9uIChzdHJlYW0pIHsKICAgICAgICAgICAgICB3ZWJydGMuZm9yRWFjaFBlZXIoZnVuY3Rpb24gKHBlZXIpIHsKICAgICAgICAgICAgICAgIHBlZXIuc2V0U3RyZWFtKHN0cmVhbSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBtZXNzYWdlcy5vbignbmVnb3RpYXRlQmFuZHdpZHRoJywgZnVuY3Rpb24gKHN0cmVhbSkgewogICAgICAgICAgICAgIHdlYnJ0Yy5mb3JFYWNoUGVlcihmdW5jdGlvbiAocGVlcikgewogICAgICAgICAgICAgICAgcGVlci5wZWVyLm5lZ290aWF0ZSgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsgLy8gYXN5bmMgZnVuY3Rpb24gZ2V0U3RhdHMocGVlcikgewogICAgICAgICAgICAvLyAgIGxldCBieXRlcyA9IDAKICAgICAgICAgICAgLy8gICBsZXQgdGltZXN0YW1wID0gMAogICAgICAgICAgICAvLyAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsKICAgICAgICAgICAgLy8gICAgIHBlZXI/LnBlZXI/LmdldFN0YXRzKChfLCByZXBvcnRzKSA9PiB7CiAgICAgICAgICAgIC8vICAgICAgIHJlcG9ydHMuZm9yRWFjaChyZXBvcnQgPT4gewogICAgICAgICAgICAvLyAgICAgICAgIGlmIChyZXBvcnQudHlwZSA9PT0gJ291dGJvdW5kLXJ0cCcpIHsKICAgICAgICAgICAgLy8gICAgICAgICAgIGlmIChyZXBvcnQuaXNSZW1vdGUpIHJldHVybgogICAgICAgICAgICAvLyAgICAgICAgICAgYnl0ZXMgKz0gcmVwb3J0LmJ5dGVzU2VudAogICAgICAgICAgICAvLyAgICAgICAgICAgdGltZXN0YW1wID0gcmVwb3J0LnRpbWVzdGFtcAogICAgICAgICAgICAvLyAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2JiJywgYnl0ZXMsIHByZXZCeXRlcywgdGltZXN0YW1wLCBwcmV2VGltZXN0YW1wKQogICAgICAgICAgICAvLyAgICAgICAgICAgcmVzb2x2ZSh7IGJ5dGVzLCB0aW1lc3RhbXAgfSkKICAgICAgICAgICAgLy8gICAgICAgICB9CiAgICAgICAgICAgIC8vICAgICAgIH0pCiAgICAgICAgICAgIC8vICAgICB9KQogICAgICAgICAgICAvLyAgIH0pCiAgICAgICAgICAgIC8vIH0KICAgICAgICAgICAgLy8KICAgICAgICAgICAgLy8gLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnJ0Yy9zYW1wbGVzL2Jsb2IvZ2gtcGFnZXMvc3JjL2NvbnRlbnQvcGVlcmNvbm5lY3Rpb24vYmFuZHdpZHRoL2pzL21haW4uanMjTDI1MwogICAgICAgICAgICAvLyBsZXQgcHJldlRpbWVzdGFtcCA9IDAKICAgICAgICAgICAgLy8gbGV0IHByZXZCeXRlcyA9IDAKICAgICAgICAgICAgLy8KICAgICAgICAgICAgLy8gaWYgKCEhbG9jYWxTdG9yYWdlLmRlYnVnKSB7CiAgICAgICAgICAgIC8vICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKICAgICAgICAgICAgLy8gICBlbC5jbGFzc05hbWUgPSAnYmFuZHdpZHRoJwogICAgICAgICAgICAvLyAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpCiAgICAgICAgICAgIC8vCiAgICAgICAgICAgIC8vICAgc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4gewogICAgICAgICAgICAvLyAgICAgLy8gY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCkKICAgICAgICAgICAgLy8gICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoT2JqZWN0LnZhbHVlcyh3ZWJydGMucGVlckNvbm5lY3Rpb25zKS5tYXAocCA9PiBnZXRTdGF0cyhwKSkpCiAgICAgICAgICAgIC8vICAgICBsZXQgYnl0ZXMgPSByZXN1bHRzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBjdXJyLmJ5dGVzICsgYWNjLCAwKQogICAgICAgICAgICAvLyAgICAgbGV0IHRpbWVzdGFtcCA9IHJlc3VsdHM/LlswXT8udGltZXN0YW1wCiAgICAgICAgICAgIC8vICAgICBjb25zdCBiaXRyYXRlID0gOCAqIChieXRlcyAtIHByZXZCeXRlcykgLyAodGltZXN0YW1wIC0gcHJldlRpbWVzdGFtcCkKICAgICAgICAgICAgLy8gICAgIGVsLnRleHRDb250ZW50ID0gYml0cmF0ZS50b0ZpeGVkKDIpICsgJyBCaXQvcycKICAgICAgICAgICAgLy8gICAgIHByZXZCeXRlcyA9IGJ5dGVzCiAgICAgICAgICAgIC8vICAgICBwcmV2VGltZXN0YW1wID0gdGltZXN0YW1wCiAgICAgICAgICAgIC8vICAgfSwgMTAwMCkKICAgICAgICAgICAgLy8gfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgd2VicnRjKTsKCiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKICByZXR1cm4gX3NldHVwV2ViUlRDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0="},{"version":3,"sources":["C:/Users/Brezgo-1098/Desktop/brezz/src/logic/connection.js"],"names":["messages","log","require","setMediaBitrate","sdp","media","bitrate","lines","split","line","i","length","indexOf","join","newLines","slice","push","concat","removeBandwidthRestriction","replace","setupWebRTC","state","WebRTC","isSupported","config","iceTransportPolicy","reconnectTimer","iceServers","urls","username","credential","webrtc","room","peerSettings","trickle","sdpTransform","bandwidth","newSDP","on","info","status","peer","stream","setStream","forEachPeer","negotiate"],"mappings":"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","sourcesContent":["// https://webrtchacks.com/limit-webrtc-bandwidth-sdp/\n\nimport { messages } from '../lib/emitter'\n\nconst log = require('debug')('app:connection')\n\nfunction setMediaBitrate(sdp, media, bitrate) {\n  let lines = sdp.split('\\n')\n  let line = -1\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].indexOf('m=' + media) === 0) {\n      line = i\n      break\n    }\n  }\n  if (line === -1) {\n    // log('Could not find the m line for', media)\n    return sdp\n  }\n  // log('Found the m line for', media, 'at line', line)\n\n  // Pass the m line\n  line++\n\n  // Skip i and c lines\n  while (lines[line].indexOf('i=') === 0 || lines[line].indexOf('c=') === 0) {\n    line++\n  }\n\n  // If we're on a b line, replace it\n  if (lines[line].indexOf('b') === 0) {\n    // log('Replaced b line at line', line)\n    lines[line] = 'b=AS:' + bitrate\n    return lines.join('\\n')\n  }\n\n  // Add a new b line\n  // log('Adding new b line before line', line)\n  let newLines = lines.slice(0, line)\n  newLines.push('b=AS:' + bitrate)\n  newLines = newLines.concat(lines.slice(line, lines.length))\n  return newLines.join('\\n')\n}\n\n// function isFirefox() {\n//   return navigator?.userAgent?.includes('Firefox/')\n// }\n//\n// function updateBandwidthRestriction(sdp, bandwidth) {\n//   let modifier = 'AS'\n//   if (isFirefox()) {\n//     bandwidth = (bandwidth >>> 0) * 1000\n//     modifier = 'TIAS'\n//   }\n//   if (sdp.indexOf('b=' + modifier + ':') === -1) {\n//     // insert b= after c= line.\n//     sdp = sdp.replace(/c=IN (.*)\\r\\n/, 'c=IN $1\\r\\nb=' + modifier + ':' + bandwidth + '\\r\\n')\n//   } else {\n//     sdp = sdp.replace(new RegExp('b=' + modifier + ':.*\\r\\n'), 'b=' + modifier + ':' + bandwidth + '\\r\\n')\n//   }\n//   return sdp\n// }\n\nfunction removeBandwidthRestriction(sdp) {\n  return sdp.replace(/b=AS:.*\\r\\n/, '').replace(/b=TIAS:.*\\r\\n/, '')\n}\n\nexport async function setupWebRTC(state) {\n  let { WebRTC } = await import(/* webpackChunkName: 'webrtc' */ './webrtc')\n\n  if (!WebRTC.isSupported()) return null\n\n  let config = {\n    iceTransportPolicy: 'all',\n    reconnectTimer: 3000,\n    iceServers: [{\n      urls: 'stun:stun.brie.fi:5349',\n    }, {\n      urls: 'turn:stun.brie.fi:5349',\n      username: 'brie',\n      credential: 'fi',\n    }],\n  }\n\n  // if (localStorage.stun) {\n  //   config.iceServers = [{\n  //     urls: localStorage.stun,\n  //   }]\n  // }\n\n  const webrtc = new WebRTC({\n    room: state.room,\n    peerSettings: {\n      trickle: true,\n      sdpTransform: sdp => {\n        log('sdpTransform', state.bandwidth) // , sdp)\n        let newSDP = sdp\n        if (state.bandwidth) {\n          //   newSDP = updateBandwidthRestriction(sdp, 10)\n          // log('Old SDP', newSDP)\n          newSDP = setMediaBitrate(newSDP, 'video', 233)\n          newSDP = setMediaBitrate(newSDP, 'audio', 80)\n          // log('New SDP', newSDP)\n        } else {\n          newSDP = removeBandwidthRestriction(sdp)\n        }\n        return newSDP\n      },\n      config,\n    },\n  })\n\n  webrtc.on('status', info => {\n    state.status = info.status\n  })\n\n  webrtc.on('connected', ({ peer }) => {\n    log('connected', peer)\n    if (state.stream) {\n      peer.setStream(state.stream)\n    }\n  })\n\n  messages.on('setLocalStream', stream => {\n    webrtc.forEachPeer(peer => {\n      peer.setStream(stream)\n    })\n  })\n\n  messages.on('negotiateBandwidth', stream => {\n    webrtc.forEachPeer(peer => {\n      peer.peer.negotiate()\n    })\n  })\n\n  // async function getStats(peer) {\n  //   let bytes = 0\n  //   let timestamp = 0\n  //   return new Promise(resolve => {\n  //     peer?.peer?.getStats((_, reports) => {\n  //       reports.forEach(report => {\n  //         if (report.type === 'outbound-rtp') {\n  //           if (report.isRemote) return\n  //           bytes += report.bytesSent\n  //           timestamp = report.timestamp\n  //           // console.log('bb', bytes, prevBytes, timestamp, prevTimestamp)\n  //           resolve({ bytes, timestamp })\n  //         }\n  //       })\n  //     })\n  //   })\n  // }\n  //\n  // // https://github.com/webrtc/samples/blob/gh-pages/src/content/peerconnection/bandwidth/js/main.js#L253\n  // let prevTimestamp = 0\n  // let prevBytes = 0\n  //\n  // if (!!localStorage.debug) {\n  //   let el = document.createElement('div')\n  //   el.className = 'bandwidth'\n  //   document.body.appendChild(el)\n  //\n  //   setInterval(async () => {\n  //     // const now = performance.now()\n  //     let results = await Promise.all(Object.values(webrtc.peerConnections).map(p => getStats(p)))\n  //     let bytes = results.reduce((acc, curr) => curr.bytes + acc, 0)\n  //     let timestamp = results?.[0]?.timestamp\n  //     const bitrate = 8 * (bytes - prevBytes) / (timestamp - prevTimestamp)\n  //     el.textContent = bitrate.toFixed(2) + ' Bit/s'\n  //     prevBytes = bytes\n  //     prevTimestamp = timestamp\n  //   }, 1000)\n  // }\n\n  return webrtc\n}\n"]}]}